
//////////////////////////////////////////////////////////////////////////
//                                                                      //
//////////////////////////////////////////////////////////////////////////

#pragma once

//////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////

#include "interface/i-row-oriented-table.hpp"
#include "interface/i-table.hpp"

//////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////

namespace SQLEngine::QueryExecutor
{
    //////////////////////////////////////////////////////////////////////
    //                                                                  //
    //////////////////////////////////////////////////////////////////////

    class ICondition;

    using UCondition = std::unique_ptr<ICondition>;

    class ICondition
    {
       public:
        virtual ~ICondition() = default;

       public:
        virtual auto Copy() const -> UCondition = 0;
        virtual auto Check(const Interface::UDynamicValue& value) const
            -> bool = 0;
        // for debug
        virtual auto ToString() const -> const std::string = 0;
    };

    auto CheckCondition(const Interface::ITable&, const ICondition&)
        -> Interface::UTable;

    //////////////////////////////////////////////////////////////////////
    //                                                                  //
    //////////////////////////////////////////////////////////////////////
}  // namespace SQLEngine::QueryExecutor

//////////////////////////////////////////////////////////////////////////
//                                                                      //
//////////////////////////////////////////////////////////////////////////
