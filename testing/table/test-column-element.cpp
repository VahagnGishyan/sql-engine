
//////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////

#include <gtest/gtest.h>

#include "table/column-element.hpp"
#include "table/dyn-object.hpp"

//////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////

using namespace SQLEngine;

//////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////

TEST(ColumnElement, Creation)
{
    auto&& element = TableNS::ColumnElement::Create();
    EXPECT_TRUE(element->IsNull());
}

//////////////////////////////////////////////////////////////////////////

TEST(ColumnElement, EmptyCreation)
{
    auto&& element = TableNS::ColumnElement::Create();
    EXPECT_TRUE(element->IsNull());
}

//////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////

TEST(ColumnElement, AssignInt)
{
    const int value = 4;

    auto&& element = TableNS::ColumnElement::Create();
    ASSERT_TRUE(element->IsNull());

    ASSERT_NO_THROW(element->SetValueAsInt(value));

    ASSERT_FALSE(element->IsNull());
    ASSERT_EQ(element->GetValueAsInt(), value);
}

TEST(ColumnElement, AssignDouble)
{
    const double value = 4.0;

    auto&& element = TableNS::ColumnElement::Create();
    ASSERT_TRUE(element->IsNull());

    ASSERT_NO_THROW(element->SetValueAsDouble(value));

    ASSERT_FALSE(element->IsNull());
    ASSERT_EQ(element->GetValueAsDouble(), value);
}

TEST(ColumnElement, AssignString)
{
    const std::string value = "4.0";

    auto&& element = TableNS::ColumnElement::Create();
    ASSERT_TRUE(element->IsNull());

    ASSERT_NO_THROW(element->SetValueAsString(value));

    ASSERT_FALSE(element->IsNull());
    ASSERT_EQ(element->GetValueAsString(), value);
}

//////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////
