
//////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////

#include <gtest/gtest.h>

#include "app-info/application.hpp"
#include "db-manager/db-local-json-stream.hpp"
#include "utility.hpp"
#include "utility/core.hpp"
#include "fmt/core.h"

//////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////

using namespace SQLEngine;

//////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////

/**
 * ToDo
 * what if name of database and
 */

auto GetLogWorkDir() -> std::string
{
    auto&& info       = Application::GetInfo();
    auto&& appWorkDir = info.GetDefaultAppData();
    return fmt::format("{}/{}", appWorkDir, "logging");
}

//////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////

TEST(DataBaseJSONWriter, InvalidCreation)
{
    std::string nonexitingPath = "";

    ASSERT_THROW(DBManager::CreateDBLocalJSONWriter(nonexitingPath),
                 std::exception);
}

//////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////

TEST(DataBaseJSONWriter, Creation)
{
    auto&& info       = Application::GetInfo();
    auto&& appWorkDir = info.GetDefaultAppData();

    auto&& workdir = Utility::GetDefaultDataPath();

    ASSERT_NO_THROW(DBManager::CreateDBLocalJSONWriter(appWorkDir));
    ASSERT_NO_THROW(DBManager::CreateDBLocalJSONWriter(workdir));

    auto&& writer = DBManager::CreateDBLocalJSONWriter(workdir);
    ASSERT_NE(writer, nullptr);
}

//////////////////////////////////////////////////////////////////////////

TEST(DataBaseJSONWriter, Writeing)
{
    auto&& logdir   = GetLogWorkDir();
    auto&& writer   = DBManager::CreateDBLocalJSONWriter(logdir);
    auto&& database = Testing::DBManager::CreateDataBase();

    ASSERT_NO_THROW(writer->Write(*database));
}

//////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////
