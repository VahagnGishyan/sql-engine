
//////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////

#include <gtest/gtest.h>

#include "app-info/application.hpp"
#include "fmt/core.h"
#include "local-database/db-local-json-stream.hpp"
#include "utility.hpp"
#include "utility/core.hpp"

//////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////

using namespace SQLEngine;

//////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////

static auto GetDefaultWorkDir() -> std::string
{
    auto&& testdir = Testing::LocalDataBase::GetDefaultTestDir();
    auto&& dbdir   = testdir + "/my-db-writer";
    return dbdir;
}

//////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////

TEST(DataBaseJSONReader, InvalidCreation)
{
    std::string nonexitingPath = "";

    ASSERT_THROW(LocalDataBase::CreateDBLocalJSONWriter(nonexitingPath),
                 std::exception);
}

//////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////

TEST(DataBaseJSONReader, Creation)
{
    auto&& info       = Application::GetInfo();
    auto&& appWorkDir = info.GetDefaultAppData();

    auto&& workdir = Utility::GetDefaultDataPath();

    ASSERT_NO_THROW(LocalDataBase::CreateDBLocalJSONWriter(appWorkDir));
    ASSERT_NO_THROW(LocalDataBase::CreateDBLocalJSONWriter(workdir));

    auto&& writer = LocalDataBase::CreateDBLocalJSONWriter(workdir);
    ASSERT_NE(writer, nullptr);
}

//////////////////////////////////////////////////////////////////////////

TEST(DataBaseJSONReader, Writeing)
{
    auto&& workdir  = GetDefaultWorkDir();
    auto&& writer   = LocalDataBase::CreateDBLocalJSONWriter(workdir);
    auto&& database = Testing::LocalDataBase::CreateDataBase();

    //////////////////////////////////////////////////////////////////////

    ASSERT_NO_THROW(writer->Write(*database));
}

//////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////
