
//////////////////////////////////////////////////////////////////////////
//                                                                      //
//////////////////////////////////////////////////////////////////////////

#include <fmt/core.h>

#include <map>
#include <stdexcept>

#include "i-dyn-object.hpp"
#include "utility/core.hpp"

//////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////

namespace SQLEngine::Interface
{
    //////////////////////////////////////////////////////////////////////
    //                                                                  //
    //////////////////////////////////////////////////////////////////////

    auto GetDynamicObjectTypeNameAsString(const DynamicObjectType& type) -> const std::string&
    {
        static std::map<DynamicObjectType, std::string> elements = {
            {DynamicObjectType::Int,    "Unset" },
            {DynamicObjectType::Int,    "Int"   },
            {DynamicObjectType::Double, "Double"},
            {DynamicObjectType::String, "String"},
        };
        static auto end = elements.end();

        auto pos = elements.find(type);
        Utility::Assert(
            pos != end,
            fmt::format("GetDynamicObjectTypeNameAsString, unknown DynamicObjectType, id is [{}]", (int)type));
        return pos->second;
    }

    //////////////////////////////////////////////////////////////////////
    //                                                                  //
    //////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////
    //                                                                  //
    //////////////////////////////////////////////////////////////////////
}  // namespace SQLEngine::Interface

//////////////////////////////////////////////////////////////////////////
//                                                                      //
//////////////////////////////////////////////////////////////////////////
