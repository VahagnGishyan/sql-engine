
//////////////////////////////////////////////////////////////////////////
//                                                                      //
//////////////////////////////////////////////////////////////////////////

#include "row.hpp"

//////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////

namespace SQLEngine::DataBaseNS
{
    //////////////////////////////////////////////////////////////////////
    //                                                                  //
    //////////////////////////////////////////////////////////////////////

    Row::Row(const unsigned int rowIndex) : m_rowIndex{rowIndex}, m_elements{}
    {
    }

    //////////////////////////////////////////////////////////////////////
    //                                                                  //
    //////////////////////////////////////////////////////////////////////

    auto Row::Create(const unsigned int rowIndex) -> Interface::URow
    {
        auto urow = Interface::URow{new Row{rowIndex}};
        return (urow);
    }

    //////////////////////////////////////////////////////////////////////

    auto Row::Copy() const -> Interface::URow
    {
        auto&& newrow = Row::Create(GetRowIndex());
        for (auto&& item : m_elements)
        {
            newrow->AddElement(item->Copy());
        }
        return std::move(newrow);
    }

    //////////////////////////////////////////////////////////////////////
    //                                                                  //
    //////////////////////////////////////////////////////////////////////

    auto Row::GetSize() const -> unsigned int
    {
        return m_elements.size();
    }

    //////////////////////////////////////////////////////////////////////

    auto Row::GetRowIndex() const -> const unsigned int
    {
        return m_rowIndex;
    }
    void Row::SetRowIndex(const unsigned int rowindex)
    {
        m_rowIndex = rowindex;
    }

    //////////////////////////////////////////////////////////////////////
    //                                                                  //
    //////////////////////////////////////////////////////////////////////

    void Row::AddElement(Interface::URowElement element)
    {
        Interface::AssertDynamicValueTypeIs(element->GetValue(), m_type);
        m_elements.push_back(std::move(element));
    }

    auto Row::GetElement(const int& index) -> Interface::IRowElement&
    {
        return *m_elements.at(index);
    }

    auto Row::GetElement(const int& index) const
        -> const Interface::IRowElement&
    {
        return *m_elements.at(index);
    }

    //////////////////////////////////////////////////////////////////////
    //                                                                  //
    //////////////////////////////////////////////////////////////////////
}  // namespace SQLEngine::DataBaseNS

//////////////////////////////////////////////////////////////////////////
//                                                                      //
//////////////////////////////////////////////////////////////////////////
